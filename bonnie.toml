version="0.3.2"

[scripts]
dev.subcommands.cli.cmd = [
	"cd packages/perseus-cli",
    # We need to copy in the directory where we actually work on the subcrate
    "rm -rf ./.perseus",
    "cp -r ../../examples/basic/.perseus/ .perseus/",
    "mv .perseus/Cargo.toml .perseus/Cargo.toml.old",
    "mv .perseus/server/Cargo.toml .perseus/server/Cargo.toml.old",
	"cargo run -- %%"
]
dev.subcommands.cli.desc = "runs the cli in its own directory (which should test `examples/basic`)"
dev.subcommands.example.cmd = [
    "bonnie copy-subcrates",
    "cd packages/perseus-cli",
    # Point this live version of the CLI at the given example
    "TEST_EXAMPLE=../../examples/%example cargo run -- %%"
]
dev.subcommands.example.args = [ "example" ]
dev.subcommands.example.desc = "serves the given example using a live version of the cli"

build = "cargo build"

copy-subcrates.cmd = [
    # The CLI needs the `.perseus/` directory copied in for packaging (and we need to rename `Cargo.toml` to `Cargo.toml.old`)
    "cd packages/perseus-cli",
    "rm -rf ./.perseus",
    "cp -r ../../examples/basic/.perseus/ .perseus/",
    "mv .perseus/Cargo.toml .perseus/Cargo.toml.old",
    "mv .perseus/server/Cargo.toml .perseus/server/Cargo.toml.old",
]
copy-subcrates.desc = "copies `.perseus/` into the CLI directory for packaging/usage"

check.cmd = [
    "cargo check --all",
    "cargo fmt --all -- --check",
    "cargo clippy --all"
]
check.desc = "checks code for formatting errors and the like"

ci-prep.cmd = [
    "mkdir -p examples/basic/.perseus/dist",
    "mkdir -p examples/basic/.perseus/dist/static",
]
ci-prep.desc = "creates empty directories to preserve the file structure that testing expects"

test.cmd = [
    "cargo test", # This will ignore Wasm tests
    # Run tests for each example
    "bonnie test example basic --headless",
    "bonnie test example i18n --headless",
    "bonnie test example showcase --headless"
]
test.desc = "runs all tests headlessly (assumes geckodriver running in background)"
test.subcommands.core.cmd = "cargo test"
test.subcommands.core.desc = "runs cargo tests only"
test.subcommands.example.cmd = "bash ./test.sh %example %%" # A script can do backgrounding properly
test.subcommands.example.args = [ "example" ]
test.subcommands.example.desc = "tests a single example (assumes geckodriver running in background), use `--headless` to run headlessly"

# Hosts the book locally
docs.cmd = [
	"cd docs/next",
	"mdbook serve"
]
docs.desc = "hosts the latest version of the book locally at http://localhost:3000"
docs.subcommands.version.cmd = [
    "cd docs/%version",
    "mdbook serve"
]
docs.subcommands.version.args = [ "version" ]
docs.subcommands.version.desc = "hosts the given version of the book locally at http://localhost:3000"
docs.subcommands.deprecate.cmd = [
    "cd docs/%version",
    "mkdir theme",
    "ln -s ../../common/index.hbs theme/index.hbs",
    "ln -s ../../common/header_old.hbs theme/header.hbs"
]
docs.subcommands.deprecate.args = [ "version" ]
docs.subcommands.deprecate.desc = "marks the given version of the docs as old and links to the latest"
docs.subcommands.create.cmd = [
    "mkdir docs/%version",
    "cd docs/%version",
    "ln -s ../common/book.toml book.toml",
    "cp -r ../next/src src",
    "cd ../",
    "sed -i -E 's/perseus\\/(.+)\"/perseus\\/0.2.x\"/' stable.html"
]
docs.subcommands.create.args = [ "version" ]
docs.subcommands.create.desc = "creates documentation for a new version from `next` and marks it as stable (doesn't deprecate old versions though)"
docs.subcommands.build.cmd = [
    "cd docs",
    "bash ./build.sh"
]
docs.subcommands.build.desc = "builds the book for deployment to GitHub pages or the like"

# Releases the project (maintainers only)
# We commit all staged files so we can manually bump the Cargo version
release.cmd = [
    "bonnie check-branch stable",
    "standard-version --sign --commit-all && git push --follow-tags %% origin stable",
    "git checkout main",
    "git merge stable",
    "git push %% origin main",
    "git checkout stable"
]
release.desc = "creates a new project release and pushes it to github (cargo version must be manually bumped, needs branch 'stable')"

# Publishes each package
publish.cmd = [
    "bonnie copy-subcrates",
    "bonnie check-branch stable",
    "cd packages/perseus-macro",
    "cargo publish %%",
    "sleep 60", # Wait for `crates.io` to be ready
    "cd ../perseus",
    "cargo publish %%",
    "cd ../perseus-cli",
    "cargo publish --allow-dirty %%", # Without this flag, `.perseus` will be a problem because it's not in Git
    # We delay this so that `crates.io` can have time to host the core
    "cd ../perseus-actix-web",
    "cargo publish %%"
]
publish.desc = "publishes all packages to crates.io (needs branch 'stable')"

check-branch.cmd.exec = "[[ $(git rev-parse --abbrev-ref HEAD) == \"%branch\" ]] && exit 0 || echo \"You need to be on Git branch '%branch' to run this command.\"; exit 1"
check-branch.cmd.shell = ["bash", "-c", "{COMMAND}"]
check-branch.args = [ "branch" ]
check-branch.desc = "checks if the current git branch is the given argument, signals with exit codes (and warns), this will prevent following commands from running if it fails"
